/*We want to know how many facilities exist - simply produce a total count*/

SELECT count(*)
FROM cd.facilities;



/*Produce a count of the number of facilities that have a cost to guests of 10 or more*/

SELECT count(guestcost)
FROM cd.facilities
WHERE guestcost >= 10;



/*Produce a count of the number of recommendations each member has made. 
Order by member ID*/

SELECT m.memid, count(ms.recommendedby)
FROM cd.members as m
join cd.members as ms on m.memid=ms.recommendedby
group by m.memid
order by m.memid;



/*Produce a list of the total number of slots booked per facility. 
For now, just produce an output table consisting of facility id and slots, 
sorted by facility id*/

select b.facid, sum(b.slots)
from cd.bookings as b
group by b.facid
order by b.facid;



/*Produce a list of the total number of slots booked per facility 
in the month of September 2012. Produce an output table 
consisting of facility id and slots, sorted by the number of slots*/

select facid, sum(slots)
from cd.bookings
where starttime >= '2012-09-01' and starttime < '2012-10-01'
group by facid
order by 2;



/*Produce a list of the total number of slots booked per facility 
per month in the year of 2012. Produce an output table
consisting of facility id and slots, sorted by the id and month*/

select facid, extract(month from starttime) as month, sum(slots)
from cd.bookings*/
where extract(year from starttime) = '2012'
group by 1, 2
order by 1, 2;



/*Find the total number of members (including guests) 
who have made at least one booking*/

select count(distinct m.memid)
from cd.members as m
join cd.bookings as b
on m.memid=b.memid;

/*Produce a list of facilities with more than 1000 slots booked. 
Produce an output table consisting of facility id and slots, 
sorted by facility id */

select facid, sum(slots)
from cd.bookings
group by facid
having sum(slots) > 1000
order by facid;



/*Produce a list of facilities with a total revenue less than 1000. 
Produce an output table consisting of facility name and revenue, 
sorted by revenue. Remember that there's a different cost 
for guests and members!*/

select name, sum(revenue)
from (select f.name as name,
	  case when b.memid=0 then b.slots*f.guestcost
	  else b.slots*f.membercost
	  end as revenue
	  from cd.bookings as b
	  join cd.facilities as f on b.facid=f.facid) as sub
group by name
having sum(revenue) < 1000
order by 2;



/*Output the facility id that has the highest number of slots booked. 
For bonus points, try a version without a LIMIT clause*/

select facid, sum(slots) as Total_Slots
	from cd.bookings
	group by facid
order by sum(slots) desc
limit 1;



/*Produce a list of the total number of slots booked per facility 
per month in the year of 2012. In this version, 
include output rows containing totals for all months per facility, 
and a total for all months for all facilities. 
The output table should consist of facility id, month and slots, 
sorted by the id and month. When calculating the aggregated 
values for all months and all facids, return null values in the month 
and facid columns*/

select facid, extract(month from starttime) as month, sum(slots)
from cd.bookings
where extract(year from starttime) = '2012'
group by rollup(1, 2)
order by 1, 2;



/*Produce a list of the total number of hours booked per facility, 
remembering that a slot lasts half an hour. 
The output table should consist of the facility id, name, 
and hours booked, sorted by facility id. 
Try formatting the hours to two decimal places*/

select f.facid, f.name, round((sum(slots)*30)/60.0, 2) as Total_Hours
from cd.bookings as b
join cd.facilities as f on b.facid=f.facid
group by 1, 2
order by 1, 2;



/*Produce a list of each member name, id, and their first booking 
after September 1st 2012. Order by member ID*/

select m.surname, m.firstname, m.memid, min(b.starttime)
from cd.members as m
join cd.bookings as b on m.memid=b.memid
where b.starttime >= '2012-09-01'
group by 1, 2, 3
order by m.memid;



/*Produce a list of member names, with each row containing 
the total member count. Order by join date, and include guest members*/

select count(*) over(), firstname, surname
from cd.members
order by joindate;



/*Produce a monotonically increasing numbered list of members 
(including guests), ordered by their date of joining. 
Remember that member IDs are not guaranteed to be sequential*/

select row_number() over (order by joindate), firstname, surname
from cd.members;



/*Output the facility id that has the highest number of slots booked. 
Ensure that in the event of a tie, all tieing results get output*/

select facid, total
from
	(select facid, 
	sum(slots) as total,
	max(sum(slots)) over () as max_sum
	from cd.bookings
	group by facid
	) as sub
where total = max_sum;



/*Produce a list of members (including guests), 
along with the number of hours they've booked in facilities, 
rounded to the nearest ten hours. Rank them by this rounded figure, 
producing output of first name, surname, rounded hours, rank. 
Sort by rank, surname, and first name*/

select m.firstname, 
m.surname, 
((sum(slots)+10)/20)*10 as hours, rank() over (order by ((sum(slots)+10)/20)*10 desc)
from cd.members as m
join cd.bookings as b on m.memid=b.memid
group by 1, 2
order by 4, 2, 1;



/*Produce a list of the top three revenue generating facilities 
(including ties). Output facility name and rank, sorted by 
rank and facility name*/

select name, rank() over (order by sum(revenue) desc)
from (select f.name as name,
	  case when b.memid=0 then b.slots*f.guestcost
	  else b.slots*f.membercost
	  end as revenue
	  from cd.bookings as b
	  join cd.facilities as f on b.facid=f.facid) as sub
group by name
order by 2, 1
limit 3;



/*Classify facilities into equally sized groups of high, 
average, and low based on their revenue. 
Order by classification and facility name*/

select name, case when revenue=1 then 'high'
				when revenue=2 then 'average'
				else 'low' end
from
	(select f.name as name, 
	 ntile (3) over (order by sum(case when b.memid=0 then b.slots*f.guestcost
						else b.slots*f.membercost end) desc) as revenue
	from cd.bookings as b
	join cd.facilities as f on b.facid=f.facid
	group by 1) as sub
order by revenue, 1;



/*Based on the 3 complete months of data so far, 
calculate the amount of time each facility will take to repay 
its cost of ownership. Remember to take into account ongoing 
monthly maintenance. Output facility name and payback time in months, 
order by facility name*/

select 	facs.name as name,
	facs.initialoutlay/((sum(case
			when memid = 0 then slots * facs.guestcost
			else slots * membercost
		end)/3) - facs.monthlymaintenance) as months
	from cd.bookings bks
	inner join cd.facilities facs
		on bks.facid = facs.facid
	group by facs.facid
order by name;     



/*For each day in August 2012, calculate a rolling average of total revenue 
over the previous 15 days. Output should contain date and revenue columns, 
sorted by the date. Remember to account for the possibility of a day having 
zero revenue*/

select 	dategen.date,
	(
		-- correlated subquery that, for each day fed into it,
		-- finds the average revenue for the last 15 days
		select sum(case
			when memid = 0 then slots * facs.guestcost
			else slots * membercost
		end) as rev

		from cd.bookings bks
		inner join cd.facilities facs
			on bks.facid = facs.facid
		where bks.starttime > dategen.date - interval '14 days'
			and bks.starttime < dategen.date + interval '1 day'
	)/15 as revenue
	from
	(
		-- generates a list of days in august
		select 	cast(generate_series(timestamp '2012-08-01',
			'2012-08-31','1 day') as date) as date
	)  as dategen
order by dategen.date;
